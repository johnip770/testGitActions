# This workflow will build a Mulesoft project with Maven

name: Mulesoft CI with Maven

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ dev ]
 # pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
      - name : build
        run: mvn -B package --file pom.xml
      - name: Stamp artifact file name with commit hash
        run: |
          artifactName1=$(ls target/*.jar | head -1)
          commitHash=$(git rev-parse --short "$GITHUB_SHA")
          artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
          mv $artifactName1 $artifactName2
      - uses: actions/upload-artifact@master
        with:
          name: artifacts
          path: target/*.jar
          
    
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    - name: Deploy to CloudHub
      env:
        username: ${{ secrets.ANYPOINT_USERNAME }}        
        password: ${{ secrets.ANYPOINT_PASSWORD }}
        app.name: "dev-testGitActions"
       
        
      run: |        
        artifactName=$(ls *.jar | head -1)        
        mvn mule:deploy -Dmule.artifact=$artifactName
        
      #   mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName=$username -Danypoint.password=$password -Danypoint.applicationName=$anypointapplication
      #  mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.applicationName="dev-testgitactions"
      # Runs a single command using the runners shell
      #- name: Run a one-line script
      #  run: echo Hello, world!

      # Runs a set of commands using the runners shell
      #- name: Run a multi-line script
     # run: |
     #    echo Add other actions to build,
     #     echo test, and deploy your project.
